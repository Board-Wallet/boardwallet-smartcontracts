/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBoardWallet,
  IBoardWalletInterface,
} from "../../../../contracts/interfaces/IBoardWallets.sol/IBoardWallet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "backupAddress",
        type: "address",
      },
    ],
    name: "BackupAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "address_",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "inheritancePercentage",
            type: "uint128",
          },
        ],
        indexed: false,
        internalType: "struct Types.Beneficiary[]",
        name: "beneficiaries",
        type: "tuple[]",
      },
    ],
    name: "BeneficiariesUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "BeneficiaryAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "beneficiaryAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "newInheritancePercentage",
        type: "uint128",
      },
    ],
    name: "BeneficiaryPercentageUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "BeneficiaryRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint128",
        name: "newEstablishmentFeeRate",
        type: "uint128",
      },
    ],
    name: "EstablishmentFeeRateUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "timestamp",
        type: "uint128",
      },
    ],
    name: "ProofOfLifeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "TestamentCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "TestamentSucceeded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "TokenAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "backupAddress",
        type: "address",
      },
    ],
    name: "accountRepossessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "backupAddress",
        type: "address",
      },
    ],
    name: "addBackup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "address_",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "inheritancePercentage",
            type: "uint128",
          },
        ],
        internalType: "struct Types.Beneficiary",
        name: "beneficiary",
        type: "tuple",
      },
    ],
    name: "addBeneficiary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelTestament",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "inactivityMaximum",
        type: "uint128",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address payable",
            name: "address_",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "inheritancePercentage",
            type: "uint128",
          },
        ],
        internalType: "struct Types.Beneficiary[]",
        name: "beneficiaries",
        type: "tuple[]",
      },
    ],
    name: "createTestament",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getBackupAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getTestamentParameters",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint128",
        name: "inactivityMaximum",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "proofOfLife",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "succeeded",
        type: "bool",
      },
      {
        internalType: "string[]",
        name: "beneficiariesNames",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "beneficiariesAddresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "beneficiariesInheritancePercentages",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "backupAddress",
        type: "address",
      },
    ],
    name: "removeBackup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiaryAddress",
        type: "address",
      },
    ],
    name: "removeBeneficiary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "repossessAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "signalLife",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "succeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "names",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint128[]",
        name: "newInheritancePercentages",
        type: "uint128[]",
      },
      {
        internalType: "uint128[]",
        name: "indexes",
        type: "uint128[]",
      },
    ],
    name: "updateBeneficiaries",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "newEstablishmentFeeRate",
        type: "uint128",
      },
    ],
    name: "updateEstablishmentFeeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "newInactivityMaximum",
        type: "uint128",
      },
    ],
    name: "updateInactivityMaximum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IBoardWallet__factory {
  static readonly abi = _abi;
  static createInterface(): IBoardWalletInterface {
    return new utils.Interface(_abi) as IBoardWalletInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBoardWallet {
    return new Contract(address, _abi, signerOrProvider) as IBoardWallet;
  }
}
